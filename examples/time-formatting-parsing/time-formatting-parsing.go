// Підтримка форматування та розбору (з рядків) часу
// в Go організована через шаблонізовані рядкові літерали.

package main

import "fmt"
import "time"

func main() {
	p := fmt.Println

	// Це простий приклад форматування часу згідно до RFC3339
	// використовуючи відповідну часову константу.
	t := time.Now()
	p(t.Format(time.RFC3339))

	// Парсинг часу використовує теж значення `вигляду`,
	// що і `Format`.
	t1, e := time.Parse(
		time.RFC3339,
		"2012-11-01T22:08:41+00:00")
	p(t1)

	// І `Format`, і `Parse` використовують для розпізнавання часу
	// строки з прикладами. Зазвичай ви будете використовувати
	// вже готові константи пакету `time` але, ви можете створювати свої власні
	// шаблони для розпізнання часу. Такі шаблони повинні використовувати
	// посилання на час `Mon Jan 2 15:04:05 MST 2006` щоб "відтворити" шаблон
	// за яким час можна розпізнати/відформатувати у відповідний рядок/час.
	// Приклад часу мусить бути таким як показано: рік 2006,
	// 15 для годни, Monday відповідно для дня тижня, ну і так далі.
	p(t.Format("3:04PM"))
	p(t.Format("Mon Jan _2 15:04:05 2006"))
	p(t.Format("2006-01-02T15:04:05.999999-07:00"))
	form := "3 04 PM"
	t2, e := time.Parse(form, "8 41 PM")
	p(t2)

	// Чисто для числового представлення ви також можете
	// використовувати стандартне рядкове форматування
	// за допомогою доступних компонентів значення часу.
	fmt.Printf("%d-%02d-%02dT%02d:%02d:%02d-00:00\n",
		t.Year(), t.Month(), t.Day(),
		t.Hour(), t.Minute(), t.Second())

	// `Parse` поверне помилку (якщо вхідна змінна деформована)
	// з поясненням в чому виникла проблема.
	ansic := "Mon Jan _2 15:04:05 2006"
	_, e = time.Parse(ansic, "8:41PM")
	p(e)
}
