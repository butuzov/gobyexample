// Пакет стандартної бібліотеки `strings` надає чимало корисних
// фкнкцій що можна використовувати з рядками. Щоб уявити можливості
// пакету `strings` приведемо кілька прикладів.

package main

import s "strings"
import "fmt"

// Ми скоротимо `fmt.Println` до `p` оскільки використовувати
// ми його будем багато.
var p = fmt.Println

func main() {

    // Ось приклади функцій що доступні в `strings`.
    // Оскільки це функції пакету, а не власні методи
    // об'єкту рядка, нам необхідно передавати рядок першим
    // аргументом прямо. Ви можете отримати більше інфомарції
    // з сторінки документації пакету [`strings`](http://golang.org/pkg/strings/).
    p("Contains:  ", s.Contains("test", "es"))
    p("Count:     ", s.Count("test", "t"))
    p("HasPrefix: ", s.HasPrefix("test", "te"))
    p("HasSuffix: ", s.HasSuffix("test", "st"))
    p("Index:     ", s.Index("test", "e"))
    p("Join:      ", s.Join([]string{"a", "b"}, "-"))
    p("Repeat:    ", s.Repeat("a", 5))
    p("Replace:   ", s.Replace("foo", "o", "0", -1))
    p("Replace:   ", s.Replace("foo", "o", "0", 1))
    p("Split:     ", s.Split("a-b-c-d-e", "-"))
    p("ToLower:   ", s.ToLower("TEST"))
    p("ToUpper:   ", s.ToUpper("test"))
    p()

    // Це не частина пакету, але варто згадати тут, то як
    // отримати довжину рядку у байтах та власне, як отримати
    // байт за індексом.
    p("Len: ", len("hello"))
    p("Char:", "hello"[1])
}

// Зауваження: `len` та індексування вище працюють на рівні байтів.
// Go ж використовує UTF-8 кодовані рядки, і тому це часто буває корисно як-є.
// Якщо ви працюєте потенційно з багатобайтними символами - скорше за все, вам зазочеться використовувати операції які зважатимуть на кодування.
// Прочитайте ["рядки, байти, руни та символи в Go"](https://blog.golang.org/strings)
// для отримання докладнішої інформації.
