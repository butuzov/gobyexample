// Пакет стандартної бібліотеки - `strings` надає чимало корисних
// фукнкцій, для роботи з рядками. Щоб показити можливості
// пакету `strings` приведемо кілька прикладів. Крім того -
// більше інфомарції можна отримати з документації на сторінці
// пакету [`strings`](http://golang.org/pkg/strings/).

package main

import (
	"fmt"
	s "strings"
)

// Скоротимо `fmt.Println` до `p` - оскільки використовувати
// ми його будем багато, і так буде більш лаконічно.
var p = fmt.Println

func main() {

	// Ось приклади функцій, що доступні в `strings`.
	// Оскільки це функції пакету, а не власні методи
	// об'єкту рядка, нам необхідно передавати рядок першим
	// аргументом.
	p("Contains:  ", s.Contains("test", "es"))
	p("Count:     ", s.Count("test", "t"))
	p("HasPrefix: ", s.HasPrefix("test", "te"))
	p("HasSuffix: ", s.HasSuffix("test", "st"))
	p("Index:     ", s.Index("test", "e"))
	p("Join:      ", s.Join([]string{"a", "b"}, "-"))
	p("Repeat:    ", s.Repeat("a", 5))
	p("Replace:   ", s.Replace("foo", "o", "0", -1))
	p("Replace:   ", s.Replace("foo", "o", "0", 1))
	p("Split:     ", s.Split("a-b-c-d-e", "-"))
	p("ToLower:   ", s.ToLower("TEST"))
	p("ToUpper:   ", s.ToUpper("test"))
	p()

	// Це не частина пакету, але варто зазначити, те як
	// отримати довжину рядку (у байтах) та, власне, як отримати
	// байт за індексом.
	p("Len: ", len("hello"))
	p("Char:", "hello"[1])
}

// Зауваження: `len` та індексування вище працюють на рівні байтів.
// Go ж використовує UTF-8 кодовані рядки, і тому це часто буває
// корисно "як-є". Якщо ви працюєте потенційно з багатобайтними
// символами - скорше за все, що вам захочеться використовувати
// операції які зважатимуть на кодування.
// Прочитайте ["рядки, байти, руни та символи в Go"](https://blog.golang.org/strings)
// для отримання докладнішої інформації.
