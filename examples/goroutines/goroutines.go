// _goroutine_ (надалі просто _горутина_) це легковісний [потік виконання](https://uk.wikipedia.org/wiki/Потік_(інформатика)).

package main

import (
    "fmt"
    "time"
)

// Функція, якою ми скористаємось, за кілька хвилин.
func f(from string) {
    for i := 0; i < 3; i++ {
        fmt.Println(from, ":", i)
    }
}

func main() {

    // Припустимо ми маємо виклик функції у вигляді `f(s)`. Це, так званий,
    // звичайним (синхронний) спосіб.
    f("direct")

    // Щоб запустити виконання функції в горутині, скористаймось
    // синтаксисом запуску горутини `go f(s)`, тким чином горутина
    // буде виконуватись одночасно з викликом.
    go f("goroutine")

    // Аналогічним чином можна запускати в горутини анонімні функції.
    go func(msg string) {
        fmt.Println(msg)
    }("going")

    // `time.Sleep(time.Millisecond)` - створить затримку у виконанні,
    // щоб ми дочекались результатів роботи вже запущених горутин.
    time.Sleep(time.Millisecond)

    // Наші два виклики наразі працюються асинхронно у різних
    // горутинах і результат їх роботи буде показано тут.
    fmt.Println("done")
}
