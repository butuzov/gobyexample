// _Мапи_ це [ассоційований тип даних](http://en.wikipedia.org/wiki/Associative_array) в Go
// (в інших мовах програмування, такі структури
// ще називають: _хеш таблиця_ або _словник_).

package main

import "fmt"

func main() {

    // Cтворюємо пусту мапу скориставший функцією [`make`](./slices):
    // `make(map[key-type]val-type)`.
    m := make(map[string]int)

    // Задаємо ключ/значення пари за допомогою,
    // вже знайомого, синтаксису доступа за індексом
    // (індексом для мап є значення _ключа_)
    // наприклад - <nobr>`name[key] = val`<nobr>.
    m["k1"] = 7
    m["k2"] = 13

    // Друк мапи з `fmt.Println` покаже нам усі існуючі
    // пари ключ/значення що належить мапі.
    fmt.Println("map:", m)

    // Добути значення для ключа можна за допомогою `name[key]`.
    v1 := m["k1"]
    fmt.Println("v1: ", v1)

    // Функція `len` поверне кількість пар у мапі.
    fmt.Println("len:", len(m))

    // Функція `delete` видалить ключ/значення пару з мапи.
    delete(m, "k2")
    fmt.Println("map:", m)

    // Необов'язкове друге значення під час запиту значення
    // по ключу з мапи, покаже чи присутній даний ключ в мапі.
    // Це корисно використати для перевірки існуючих ключів та
    // ключів _з нульовим значенням_ (наприклад `0` або `""`).
    // В цьому прикладі, нам непотрібно саме значення - отож ми
    // ігноруємо його за допомогою _пустого ідентифікатора_ `_`.
    _, prs := m["k2"]
    fmt.Println("prs:", prs)

    // Декларувати та ініалізувати мапу в один
    // рядок можна використовуючи наступний синтаксис.
    n := map[string]int{"foo": 1, "bar": 2}
    fmt.Println("map:", n)
}
